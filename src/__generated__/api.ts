/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export type paths = {
  '/v1/{dsn}/metadata/get-latest': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['v1.metadata.getLatest'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/{dsn}/sites/get-site': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations['v1.sites.getSite'];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/v1/{dsn}/sites/register-build': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations['v1.sites.registerBuild'];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type webhooks = {
  webhook: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Webhook
     * @description Webhook triggered by Generate Metadata.
     */
    post: {
      parameters: {
        query?: never;
        header: {
          /** @description HMAC SHA256 signature in format: sha256=<hex>. Generated from timestamp.payload using the webhook secret. */
          'X-Webhook-Signature': string;
          /** @description Unix timestamp (milliseconds) when the webhook was sent */
          'X-Webhook-Timestamp': string;
          /**
           * @deprecated
           * @description Bearer token with the webhook secret (deprecated, use signature verification instead)
           */
          Authorization: string;
          /** @description Always set to application/json */
          'Content-Type': 'application/json';
        };
        path?: never;
        cookie?: never;
      };
      requestBody: {
        content: {
          'application/json':
            | {
                /** @enum {string} */
                _type: 'placeholder';
              }
            | {
                /**
                 * @description Type of webhook event
                 * @enum {string}
                 */
                _type: 'metadata_update';
                /** @description The metadata content */
                metadata: {
                  appleTouchIcon?: {
                    alt?: string;
                    height: number;
                    mimeType: string;
                    url: string;
                    width: number;
                  }[];
                  customTags?: {
                    content: string;
                    name: string;
                  }[];
                  description?: string;
                  icon?: {
                    alt?: string;
                    height: number;
                    mimeType: string;
                    url: string;
                    width: number;
                  }[];
                  noindex?: boolean;
                  openGraph?: {
                    description?: string;
                    /** @enum {string} */
                    determiner?: '' | 'a' | 'an' | 'the' | 'auto';
                    image?: {
                      alt?: string;
                      height: number;
                      mimeType: string;
                      url: string;
                      width: number;
                    };
                    images?: {
                      alt?: string;
                      height: number;
                      mimeType: string;
                      url: string;
                      width: number;
                    }[];
                    locale?: string;
                    localeAlternate?: string[];
                    siteName?: string;
                    title?: string;
                    /** @enum {string} */
                    type?:
                      | 'website'
                      | 'article'
                      | 'book'
                      | 'profile'
                      | 'music.song'
                      | 'music.album'
                      | 'music.playlist'
                      | 'music.radio_station'
                      | 'video.movie'
                      | 'video.episode'
                      | 'video.tv_show'
                      | 'video.other';
                    url?: string;
                  };
                  title?: string;
                  twitter?: {
                    /** @enum {string} */
                    card?: 'summary' | 'summary_large_image';
                    description?: string;
                    image?: {
                      alt?: string;
                      height: number;
                      mimeType: string;
                      url: string;
                      width: number;
                    };
                    title?: string;
                  };
                };
                /** @description ID of the metadata revision */
                metadataRevisionId: string;
                /** @description Page path (null for site default) */
                path: string | null;
                /** @description Site information */
                site: {
                  /** @description Site DSN identifier */
                  dsn: string;
                  /** @description Site hostname */
                  hostname: string;
                };
                /** @description ISO 8601 timestamp of the event */
                timestamp: string;
              };
        };
      };
      responses: {
        /** @description Webhook processed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @description Optional metadata object with any additional information */
              metadata?: {
                [key: string]: unknown;
              };
              /** @example true */
              ok: boolean;
            };
          };
        };
        /** @description Invalid signature or authorization */
        401: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Invalid webhook signature */
              error: string;
              /** @description Optional metadata object with any additional information */
              metadata?: {
                [key: string]: unknown;
              };
              /** @example false */
              ok: boolean;
            };
          };
        };
        /** @description Internal server error */
        500: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': {
              /** @example Internal server error */
              error: string;
              /** @description Optional metadata object with any additional information */
              metadata?: {
                [key: string]: unknown;
              };
              /** @example false */
              ok: boolean;
            };
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
};
export type components = {
  schemas: never;
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
};
export type $defs = Record<string, never>;
export type operations = {
  'v1.metadata.getLatest': {
    parameters: {
      query?: {
        path?: string;
      };
      header?: never;
      path: {
        dsn: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            metadata: {
              appleTouchIcon?: {
                alt?: string;
                height: number;
                mimeType: string;
                url: string;
                width: number;
              }[];
              customTags?: {
                content: string;
                name: string;
              }[];
              description?: string;
              icon?: {
                alt?: string;
                height: number;
                mimeType: string;
                url: string;
                width: number;
              }[];
              noindex?: boolean;
              openGraph?: {
                description?: string;
                /** @enum {unknown} */
                determiner?: '' | 'a' | 'an' | 'the' | 'auto';
                image?: {
                  alt?: string;
                  height: number;
                  mimeType: string;
                  url: string;
                  width: number;
                };
                images?: {
                  alt?: string;
                  height: number;
                  mimeType: string;
                  url: string;
                  width: number;
                }[];
                locale?: string;
                localeAlternate?: string[];
                siteName?: string;
                title?: string;
                /** @enum {unknown} */
                type?:
                  | 'website'
                  | 'article'
                  | 'book'
                  | 'profile'
                  | 'music.song'
                  | 'music.album'
                  | 'music.playlist'
                  | 'music.radio_station'
                  | 'video.movie'
                  | 'video.episode'
                  | 'video.tv_show'
                  | 'video.other';
                url?: string;
              };
              title?: string;
              twitter?: {
                /** @enum {unknown} */
                card?: 'summary' | 'summary_large_image';
                description?: string;
                image?: {
                  alt?: string;
                  height: number;
                  mimeType: string;
                  url: string;
                  width: number;
                };
                title?: string;
              };
            };
            metadataRevisionId?: string;
          };
        };
      };
    };
  };
  'v1.sites.getSite': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        dsn: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            site: {
              autoAcceptAiSuggestions: boolean;
              autoScrapeEnabled: boolean;
              hostname: string;
              id: string;
              name: string;
              titleTemplate: string | null;
            };
          };
        };
      };
    };
  };
  'v1.sites.registerBuild': {
    parameters: {
      query?: never;
      header?: never;
      path: {
        dsn: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        'application/json': {
          buildId: string;
          /** @enum {unknown} */
          framework?: 'next' | 'tanstack-start';
        };
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          'application/json': {
            message: string;
            success: boolean;
          };
        };
      };
    };
  };
};
